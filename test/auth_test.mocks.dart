// Mocks generated by Mockito 5.0.6 from annotations
// in flutter_reddit/test/auth_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oauth2_client/access_token_response.dart' as _i3;
import 'package:oauth2_client/src/storage.dart' as _i2;
import 'package:oauth2_client/src/token_storage.dart' as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeStorage extends _i1.Fake implements _i2.Storage {}

class _FakeAccessTokenResponse extends _i1.Fake
    implements _i3.AccessTokenResponse {}

/// A class which mocks [TokenStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenStorage extends _i1.Mock implements _i4.TokenStorage {
  MockTokenStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  set key(String? _key) => super.noSuchMethod(Invocation.setter(#key, _key),
      returnValueForMissingStub: null);
  @override
  _i2.Storage get storage => (super.noSuchMethod(Invocation.getter(#storage),
      returnValue: _FakeStorage()) as _i2.Storage);
  @override
  set storage(_i2.Storage? _storage) =>
      super.noSuchMethod(Invocation.setter(#storage, _storage),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i3.AccessTokenResponse?> getToken(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#getToken, [scopes]),
              returnValue: Future<_i3.AccessTokenResponse?>.value(
                  _FakeAccessTokenResponse()))
          as _i5.Future<_i3.AccessTokenResponse?>);
  @override
  _i5.Future<void> addToken(_i3.AccessTokenResponse? tknResp) =>
      (super.noSuchMethod(Invocation.method(#addToken, [tknResp]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<Map<String, Map<dynamic, dynamic>>> insertToken(
          _i3.AccessTokenResponse? tknResp) =>
      (super.noSuchMethod(Invocation.method(#insertToken, [tknResp]),
              returnValue: Future<Map<String, Map<dynamic, dynamic>>>.value(
                  <String, Map<dynamic, dynamic>>{}))
          as _i5.Future<Map<String, Map<dynamic, dynamic>>>);
  @override
  _i5.Future<bool> deleteToken(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#deleteToken, [scopes]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> deleteAllTokens() =>
      (super.noSuchMethod(Invocation.method(#deleteAllTokens, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  List<String> clearScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#clearScopes, [scopes]),
          returnValue: <String>[]) as List<String>);
  @override
  List<dynamic> getSortedScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#getSortedScopes, [scopes]),
          returnValue: <dynamic>[]) as List<dynamic>);
  @override
  String getScopeKey(List<String>? scope) =>
      (super.noSuchMethod(Invocation.method(#getScopeKey, [scope]),
          returnValue: '') as String);
}

/// A class which mocks [Storage].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorage extends _i1.Mock implements _i2.Storage {
  MockStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String?> read(String? key) =>
      (super.noSuchMethod(Invocation.method(#read, [key]),
          returnValue: Future<String?>.value('')) as _i5.Future<String?>);
  @override
  _i5.Future<void> write(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#write, [key, value]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}
