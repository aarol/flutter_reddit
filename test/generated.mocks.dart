// Mocks generated by Mockito 5.0.6 from annotations
// in flutter_reddit/test/generated.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;

import 'package:flutter_reddit/src/oauth_client.dart' as _i13;
import 'package:http/src/client.dart' as _i12;
import 'package:http/src/response.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oauth2_client/access_token_response.dart' as _i3;
import 'package:oauth2_client/authorization_response.dart' as _i9;
import 'package:oauth2_client/oauth2_client.dart' as _i4;
import 'package:oauth2_client/oauth2_helper.dart' as _i11;
import 'package:oauth2_client/oauth2_response.dart' as _i6;
import 'package:oauth2_client/src/storage.dart' as _i2;
import 'package:oauth2_client/src/token_storage.dart' as _i5;
import 'package:oauth2_client/src/web_auth.dart' as _i8;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeStorage extends _i1.Fake implements _i2.Storage {}

class _FakeAccessTokenResponse extends _i1.Fake
    implements _i3.AccessTokenResponse {}

class _FakeOAuth2Client extends _i1.Fake implements _i4.OAuth2Client {}

class _FakeTokenStorage extends _i1.Fake implements _i5.TokenStorage {}

class _FakeOAuth2Response extends _i1.Fake implements _i6.OAuth2Response {}

class _FakeResponse extends _i1.Fake implements _i7.Response {}

class _FakeWebAuth extends _i1.Fake implements _i8.WebAuth {}

class _FakeAuthorizationResponse extends _i1.Fake
    implements _i9.AuthorizationResponse {}

/// A class which mocks [TokenStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenStorage extends _i1.Mock implements _i5.TokenStorage {
  MockTokenStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  set key(String? _key) => super.noSuchMethod(Invocation.setter(#key, _key),
      returnValueForMissingStub: null);
  @override
  _i2.Storage get storage => (super.noSuchMethod(Invocation.getter(#storage),
      returnValue: _FakeStorage()) as _i2.Storage);
  @override
  set storage(_i2.Storage? _storage) =>
      super.noSuchMethod(Invocation.setter(#storage, _storage),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i3.AccessTokenResponse?> getToken(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#getToken, [scopes]),
              returnValue: Future<_i3.AccessTokenResponse?>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse?>);
  @override
  _i10.Future<void> addToken(_i3.AccessTokenResponse? tknResp) =>
      (super.noSuchMethod(Invocation.method(#addToken, [tknResp]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
  @override
  _i10.Future<Map<String, Map<dynamic, dynamic>>> insertToken(
          _i3.AccessTokenResponse? tknResp) =>
      (super.noSuchMethod(Invocation.method(#insertToken, [tknResp]),
              returnValue: Future<Map<String, Map<dynamic, dynamic>>>.value(
                  <String, Map<dynamic, dynamic>>{}))
          as _i10.Future<Map<String, Map<dynamic, dynamic>>>);
  @override
  _i10.Future<bool> deleteToken(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#deleteToken, [scopes]),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> deleteAllTokens() =>
      (super.noSuchMethod(Invocation.method(#deleteAllTokens, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  List<String> clearScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#clearScopes, [scopes]),
          returnValue: <String>[]) as List<String>);
  @override
  List<dynamic> getSortedScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#getSortedScopes, [scopes]),
          returnValue: <dynamic>[]) as List<dynamic>);
  @override
  String getScopeKey(List<String>? scope) =>
      (super.noSuchMethod(Invocation.method(#getScopeKey, [scope]),
          returnValue: '') as String);
}

/// A class which mocks [Storage].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorage extends _i1.Mock implements _i2.Storage {
  MockStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<String?> read(String? key) =>
      (super.noSuchMethod(Invocation.method(#read, [key]),
          returnValue: Future<String?>.value('')) as _i10.Future<String?>);
  @override
  _i10.Future<void> write(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#write, [key, value]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i10.Future<void>);
}

/// A class which mocks [OAuth2Helper].
///
/// See the documentation for Mockito's code generation for more information.
class MockOAuth2Helper extends _i1.Mock implements _i11.OAuth2Helper {
  MockOAuth2Helper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.OAuth2Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeOAuth2Client()) as _i4.OAuth2Client);
  @override
  _i5.TokenStorage get tokenStorage =>
      (super.noSuchMethod(Invocation.getter(#tokenStorage),
          returnValue: _FakeTokenStorage()) as _i5.TokenStorage);
  @override
  set tokenStorage(_i5.TokenStorage? _tokenStorage) =>
      super.noSuchMethod(Invocation.setter(#tokenStorage, _tokenStorage),
          returnValueForMissingStub: null);
  @override
  int get grantType =>
      (super.noSuchMethod(Invocation.getter(#grantType), returnValue: 0)
          as int);
  @override
  set grantType(int? _grantType) =>
      super.noSuchMethod(Invocation.setter(#grantType, _grantType),
          returnValueForMissingStub: null);
  @override
  String get clientId =>
      (super.noSuchMethod(Invocation.getter(#clientId), returnValue: '')
          as String);
  @override
  set clientId(String? _clientId) =>
      super.noSuchMethod(Invocation.setter(#clientId, _clientId),
          returnValueForMissingStub: null);
  @override
  set clientSecret(String? _clientSecret) =>
      super.noSuchMethod(Invocation.setter(#clientSecret, _clientSecret),
          returnValueForMissingStub: null);
  @override
  set scopes(List<String>? _scopes) =>
      super.noSuchMethod(Invocation.setter(#scopes, _scopes),
          returnValueForMissingStub: null);
  @override
  bool get enablePKCE =>
      (super.noSuchMethod(Invocation.getter(#enablePKCE), returnValue: false)
          as bool);
  @override
  set enablePKCE(bool? _enablePKCE) =>
      super.noSuchMethod(Invocation.setter(#enablePKCE, _enablePKCE),
          returnValueForMissingStub: null);
  @override
  bool get enableState =>
      (super.noSuchMethod(Invocation.getter(#enableState), returnValue: false)
          as bool);
  @override
  set enableState(bool? _enableState) =>
      super.noSuchMethod(Invocation.setter(#enableState, _enableState),
          returnValueForMissingStub: null);
  @override
  set afterAuthorizationCodeCb(Function? _afterAuthorizationCodeCb) =>
      super.noSuchMethod(
          Invocation.setter(
              #afterAuthorizationCodeCb, _afterAuthorizationCodeCb),
          returnValueForMissingStub: null);
  @override
  set authCodeParams(Map<String, dynamic>? _authCodeParams) =>
      super.noSuchMethod(Invocation.setter(#authCodeParams, _authCodeParams),
          returnValueForMissingStub: null);
  @override
  set accessTokenParams(Map<String, dynamic>? _accessTokenParams) => super
      .noSuchMethod(Invocation.setter(#accessTokenParams, _accessTokenParams),
          returnValueForMissingStub: null);
  @override
  void setAuthorizationParams(
          {int? grantType,
          String? clientId,
          String? clientSecret,
          List<String>? scopes,
          bool? enablePKCE,
          bool? enableState,
          Map<String, dynamic>? authCodeParams,
          Map<String, dynamic>? accessTokenParams}) =>
      super.noSuchMethod(
          Invocation.method(#setAuthorizationParams, [], {
            #grantType: grantType,
            #clientId: clientId,
            #clientSecret: clientSecret,
            #scopes: scopes,
            #enablePKCE: enablePKCE,
            #enableState: enableState,
            #authCodeParams: authCodeParams,
            #accessTokenParams: accessTokenParams
          }),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i3.AccessTokenResponse?> getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []),
              returnValue: Future<_i3.AccessTokenResponse?>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse?>);
  @override
  _i10.Future<_i3.AccessTokenResponse?> getTokenFromStorage() =>
      (super.noSuchMethod(Invocation.method(#getTokenFromStorage, []),
              returnValue: Future<_i3.AccessTokenResponse?>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse?>);
  @override
  _i10.Future<_i3.AccessTokenResponse> fetchToken() => (super.noSuchMethod(
          Invocation.method(#fetchToken, []),
          returnValue:
              Future<_i3.AccessTokenResponse>.value(_FakeAccessTokenResponse()))
      as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i3.AccessTokenResponse> refreshToken(String? refreshToken) =>
      (super.noSuchMethod(Invocation.method(#refreshToken, [refreshToken]),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i6.OAuth2Response> disconnect({dynamic httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#disconnect, [], {#httpClient: httpClient}),
              returnValue:
                  Future<_i6.OAuth2Response>.value(_FakeOAuth2Response()))
          as _i10.Future<_i6.OAuth2Response>);
  @override
  _i10.Future<dynamic> removeAllTokens() =>
      (super.noSuchMethod(Invocation.method(#removeAllTokens, []),
          returnValue: Future<dynamic>.value(null)) as _i10.Future<dynamic>);
  @override
  _i10.Future<_i7.Response> post(String? url,
          {Map<String, String>? headers,
          dynamic body,
          _i12.Client? httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #httpClient: httpClient}),
              returnValue: Future<_i7.Response>.value(_FakeResponse()))
          as _i10.Future<_i7.Response>);
  @override
  _i10.Future<_i7.Response> put(String? url,
          {Map<String, String>? headers,
          dynamic body,
          _i12.Client? httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #httpClient: httpClient}),
              returnValue: Future<_i7.Response>.value(_FakeResponse()))
          as _i10.Future<_i7.Response>);
  @override
  _i10.Future<_i7.Response> patch(String? url,
          {Map<String, String>? headers,
          dynamic body,
          _i12.Client? httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #httpClient: httpClient}),
              returnValue: Future<_i7.Response>.value(_FakeResponse()))
          as _i10.Future<_i7.Response>);
  @override
  _i10.Future<_i7.Response> get(String? url,
          {Map<String, String>? headers, _i12.Client? httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #get, [url], {#headers: headers, #httpClient: httpClient}),
              returnValue: Future<_i7.Response>.value(_FakeResponse()))
          as _i10.Future<_i7.Response>);
  @override
  _i10.Future<_i7.Response> delete(String? url,
          {Map<String, String>? headers, _i12.Client? httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #delete, [url], {#headers: headers, #httpClient: httpClient}),
              returnValue: Future<_i7.Response>.value(_FakeResponse()))
          as _i10.Future<_i7.Response>);
  @override
  _i10.Future<_i7.Response> head(String? url,
          {Map<String, String>? headers,
          dynamic body,
          _i12.Client? httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [url],
                  {#headers: headers, #body: body, #httpClient: httpClient}),
              returnValue: Future<_i7.Response>.value(_FakeResponse()))
          as _i10.Future<_i7.Response>);
}

/// A class which mocks [RedditOAuthClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockRedditOAuthClient extends _i1.Mock implements _i13.RedditOAuthClient {
  MockRedditOAuthClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TokenStorage get storage =>
      (super.noSuchMethod(Invocation.getter(#storage),
          returnValue: _FakeTokenStorage()) as _i5.TokenStorage);
  @override
  String get redirectUri =>
      (super.noSuchMethod(Invocation.getter(#redirectUri), returnValue: '')
          as String);
  @override
  set redirectUri(String? _redirectUri) =>
      super.noSuchMethod(Invocation.setter(#redirectUri, _redirectUri),
          returnValueForMissingStub: null);
  @override
  String get customUriScheme =>
      (super.noSuchMethod(Invocation.getter(#customUriScheme), returnValue: '')
          as String);
  @override
  set customUriScheme(String? _customUriScheme) =>
      super.noSuchMethod(Invocation.setter(#customUriScheme, _customUriScheme),
          returnValueForMissingStub: null);
  @override
  String get tokenUrl =>
      (super.noSuchMethod(Invocation.getter(#tokenUrl), returnValue: '')
          as String);
  @override
  set tokenUrl(String? _tokenUrl) =>
      super.noSuchMethod(Invocation.setter(#tokenUrl, _tokenUrl),
          returnValueForMissingStub: null);
  @override
  set refreshUrl(String? _refreshUrl) =>
      super.noSuchMethod(Invocation.setter(#refreshUrl, _refreshUrl),
          returnValueForMissingStub: null);
  @override
  set revokeUrl(String? _revokeUrl) =>
      super.noSuchMethod(Invocation.setter(#revokeUrl, _revokeUrl),
          returnValueForMissingStub: null);
  @override
  String get authorizeUrl =>
      (super.noSuchMethod(Invocation.getter(#authorizeUrl), returnValue: '')
          as String);
  @override
  set authorizeUrl(String? _authorizeUrl) =>
      super.noSuchMethod(Invocation.setter(#authorizeUrl, _authorizeUrl),
          returnValueForMissingStub: null);
  @override
  String get scopeSeparator =>
      (super.noSuchMethod(Invocation.getter(#scopeSeparator), returnValue: '')
          as String);
  @override
  set scopeSeparator(String? _scopeSeparator) =>
      super.noSuchMethod(Invocation.setter(#scopeSeparator, _scopeSeparator),
          returnValueForMissingStub: null);
  @override
  _i8.WebAuth get webAuthClient =>
      (super.noSuchMethod(Invocation.getter(#webAuthClient),
          returnValue: _FakeWebAuth()) as _i8.WebAuth);
  @override
  set webAuthClient(_i8.WebAuth? _webAuthClient) =>
      super.noSuchMethod(Invocation.setter(#webAuthClient, _webAuthClient),
          returnValueForMissingStub: null);
  @override
  _i4.CredentialsLocation get credentialsLocation => (super.noSuchMethod(
      Invocation.getter(#credentialsLocation),
      returnValue: _i4.CredentialsLocation.HEADER) as _i4.CredentialsLocation);
  @override
  set credentialsLocation(_i4.CredentialsLocation? _credentialsLocation) =>
      super.noSuchMethod(
          Invocation.setter(#credentialsLocation, _credentialsLocation),
          returnValueForMissingStub: null);
  @override
  set accessTokenRequestHeaders(Map<String, String>? headers) =>
      super.noSuchMethod(Invocation.setter(#accessTokenRequestHeaders, headers),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i3.AccessTokenResponse> getTokenWithAppOnlyFlow(
          {String? clientId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getTokenWithAppOnlyFlow, [], {#clientId: clientId}),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i3.AccessTokenResponse> refreshToken(String? refreshToken,
          {dynamic httpClient, String? clientId, String? clientSecret}) =>
      (super.noSuchMethod(
              Invocation.method(#refreshToken, [
                refreshToken
              ], {
                #httpClient: httpClient,
                #clientId: clientId,
                #clientSecret: clientSecret
              }),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i3.AccessTokenResponse> getTokenWithImplicitGrantFlow(
          {String? clientId,
          List<String>? scopes,
          bool? enableState = true,
          String? state,
          dynamic httpClient,
          dynamic webAuthClient}) =>
      (super.noSuchMethod(
              Invocation.method(#getTokenWithImplicitGrantFlow, [], {
                #clientId: clientId,
                #scopes: scopes,
                #enableState: enableState,
                #state: state,
                #httpClient: httpClient,
                #webAuthClient: webAuthClient
              }),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i3.AccessTokenResponse> getTokenWithAuthCodeFlow(
          {String? clientId,
          List<String>? scopes,
          String? clientSecret,
          bool? enablePKCE = true,
          bool? enableState = true,
          String? state,
          String? codeVerifier,
          Function? afterAuthorizationCodeCb,
          Map<String, dynamic>? authCodeParams,
          Map<String, dynamic>? accessTokenParams,
          dynamic httpClient,
          dynamic webAuthClient}) =>
      (super.noSuchMethod(
              Invocation.method(#getTokenWithAuthCodeFlow, [], {
                #clientId: clientId,
                #scopes: scopes,
                #clientSecret: clientSecret,
                #enablePKCE: enablePKCE,
                #enableState: enableState,
                #state: state,
                #codeVerifier: codeVerifier,
                #afterAuthorizationCodeCb: afterAuthorizationCodeCb,
                #authCodeParams: authCodeParams,
                #accessTokenParams: accessTokenParams,
                #httpClient: httpClient,
                #webAuthClient: webAuthClient
              }),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i3.AccessTokenResponse> getTokenWithClientCredentialsFlow(
          {String? clientId,
          String? clientSecret,
          List<String>? scopes,
          dynamic httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#getTokenWithClientCredentialsFlow, [], {
                #clientId: clientId,
                #clientSecret: clientSecret,
                #scopes: scopes,
                #httpClient: httpClient
              }),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i9.AuthorizationResponse> requestAuthorization(
          {String? clientId,
          List<String>? scopes,
          String? codeChallenge,
          bool? enableState = true,
          String? state,
          Map<String, dynamic>? customParams,
          dynamic webAuthClient}) =>
      (super.noSuchMethod(
              Invocation.method(#requestAuthorization, [], {
                #clientId: clientId,
                #scopes: scopes,
                #codeChallenge: codeChallenge,
                #enableState: enableState,
                #state: state,
                #customParams: customParams,
                #webAuthClient: webAuthClient
              }),
              returnValue: Future<_i9.AuthorizationResponse>.value(
                  _FakeAuthorizationResponse()))
          as _i10.Future<_i9.AuthorizationResponse>);
  @override
  _i10.Future<_i3.AccessTokenResponse> requestAccessToken(
          {String? code,
          String? clientId,
          String? clientSecret,
          String? codeVerifier,
          List<String>? scopes,
          Map<String, dynamic>? customParams,
          dynamic httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#requestAccessToken, [], {
                #code: code,
                #clientId: clientId,
                #clientSecret: clientSecret,
                #codeVerifier: codeVerifier,
                #scopes: scopes,
                #customParams: customParams,
                #httpClient: httpClient
              }),
              returnValue: Future<_i3.AccessTokenResponse>.value(
                  _FakeAccessTokenResponse()))
          as _i10.Future<_i3.AccessTokenResponse>);
  @override
  _i10.Future<_i6.OAuth2Response> revokeToken(_i3.AccessTokenResponse? tknResp,
          {String? clientId, String? clientSecret, dynamic httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#revokeToken, [
                tknResp
              ], {
                #clientId: clientId,
                #clientSecret: clientSecret,
                #httpClient: httpClient
              }),
              returnValue:
                  Future<_i6.OAuth2Response>.value(_FakeOAuth2Response()))
          as _i10.Future<_i6.OAuth2Response>);
  @override
  _i10.Future<_i6.OAuth2Response> revokeAccessToken(
          _i3.AccessTokenResponse? tknResp,
          {String? clientId,
          String? clientSecret,
          dynamic httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#revokeAccessToken, [
                tknResp
              ], {
                #clientId: clientId,
                #clientSecret: clientSecret,
                #httpClient: httpClient
              }),
              returnValue:
                  Future<_i6.OAuth2Response>.value(_FakeOAuth2Response()))
          as _i10.Future<_i6.OAuth2Response>);
  @override
  _i10.Future<_i6.OAuth2Response> revokeRefreshToken(
          _i3.AccessTokenResponse? tknResp,
          {String? clientId,
          String? clientSecret,
          dynamic httpClient}) =>
      (super.noSuchMethod(
              Invocation.method(#revokeRefreshToken, [
                tknResp
              ], {
                #clientId: clientId,
                #clientSecret: clientSecret,
                #httpClient: httpClient
              }),
              returnValue:
                  Future<_i6.OAuth2Response>.value(_FakeOAuth2Response()))
          as _i10.Future<_i6.OAuth2Response>);
  @override
  String getAuthorizeUrl(
          {String? clientId,
          String? responseType = r'code',
          String? redirectUri,
          List<String>? scopes,
          bool? enableState = true,
          String? state,
          String? codeChallenge,
          Map<String, dynamic>? customParams}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthorizeUrl, [], {
            #clientId: clientId,
            #responseType: responseType,
            #redirectUri: redirectUri,
            #scopes: scopes,
            #enableState: enableState,
            #state: state,
            #codeChallenge: codeChallenge,
            #customParams: customParams
          }),
          returnValue: '') as String);
  @override
  Map<String, dynamic> getTokenUrlParams(
          {String? code,
          String? redirectUri,
          String? codeVerifier,
          Map<String, dynamic>? customParams}) =>
      (super.noSuchMethod(
          Invocation.method(#getTokenUrlParams, [], {
            #code: code,
            #redirectUri: redirectUri,
            #codeVerifier: codeVerifier,
            #customParams: customParams
          }),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  Map<String, String> getAuthorizationHeader(
          {String? clientId, String? clientSecret}) =>
      (super.noSuchMethod(
          Invocation.method(#getAuthorizationHeader, [],
              {#clientId: clientId, #clientSecret: clientSecret}),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  Map<String, String> getRefreshUrlParams({String? refreshToken}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getRefreshUrlParams, [], {#refreshToken: refreshToken}),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  _i3.AccessTokenResponse http2TokenResponse(_i7.Response? response,
          {List<String>? requestedScopes}) =>
      (super.noSuchMethod(
          Invocation.method(#http2TokenResponse, [response],
              {#requestedScopes: requestedScopes}),
          returnValue: _FakeAccessTokenResponse()) as _i3.AccessTokenResponse);
  @override
  String serializeScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#serializeScopes, [scopes]),
          returnValue: '') as String);
}

/// A class which mocks [AccessTokenResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccessTokenResponse extends _i1.Mock
    implements _i3.AccessTokenResponse {
  MockAccessTokenResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set refreshToken(String? _tkn) =>
      super.noSuchMethod(Invocation.setter(#refreshToken, _tkn),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get respMap =>
      (super.noSuchMethod(Invocation.getter(#respMap),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set respMap(Map<String, dynamic>? _respMap) =>
      super.noSuchMethod(Invocation.setter(#respMap, _respMap),
          returnValueForMissingStub: null);
  @override
  int get httpStatusCode =>
      (super.noSuchMethod(Invocation.getter(#httpStatusCode), returnValue: 0)
          as int);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  bool isExpired() =>
      (super.noSuchMethod(Invocation.method(#isExpired, []), returnValue: false)
          as bool);
  @override
  bool refreshNeeded({dynamic secondsToExpiration = 30}) => (super.noSuchMethod(
      Invocation.method(
          #refreshNeeded, [], {#secondsToExpiration: secondsToExpiration}),
      returnValue: false) as bool);
  @override
  bool hasRefreshToken() =>
      (super.noSuchMethod(Invocation.method(#hasRefreshToken, []),
          returnValue: false) as bool);
  @override
  bool isBearer() =>
      (super.noSuchMethod(Invocation.method(#isBearer, []), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
  @override
  dynamic getRespField(String? fieldName) =>
      super.noSuchMethod(Invocation.method(#getRespField, [fieldName]));
  @override
  bool isValid() =>
      (super.noSuchMethod(Invocation.method(#isValid, []), returnValue: false)
          as bool);
}
